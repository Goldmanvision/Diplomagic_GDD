name: Daily Status Digest
on:
  schedule: [{ cron: '30 13 * * *' }]  # 09:30 ET (UTC)
  workflow_dispatch:
permissions:
  contents: read
  issues: write
jobs:
  digest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/github-script@v7
        id: gather
        with:
          script: |
            const {owner, repo} = context.repo;
            const since = new Date(Date.now()-24*60*60*1000).toISOString();
            const commits = await github.paginate(
              github.rest.repos.listCommits, {owner, repo, since, per_page: 100}
            );
            const lines = commits.map(c =>
              `- ${c.commit.author.date} ${c.sha.slice(0,7)} ${c.commit.message.split('\n')[0]}`
            ).join('\n') || 'No commits in last 24h.';
            core.setOutput('lines', lines);

      - uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const apiKey = process.env.OPENAI_API_KEY;
            if (!apiKey) throw new Error('OPENAI_API_KEY missing');

            const lines = `${{ steps.gather.outputs.lines }}`;
            const body = {
              model: "gpt-4o-mini",
              temperature: 0.2,
              messages: [
                {role:"system", content:"Daily GDD digest. Terse. Buckets: patches, trackers, root edits, workflows."},
                {role:"user",   content: lines}
              ]
            };

            const res = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: { 'Authorization': `Bearer ${apiKey}`, 'Content-Type': 'application/json' },
              body: JSON.stringify(body)
            });
            if (!res.ok) throw new Error(`OpenAI HTTP ${res.status}: ${await res.text()}`);
            const data = await res.json();
            const text = data.choices?.[0]?.message?.content ?? 'No summary.';

            const title = `Daily Status ${new Date().toISOString().slice(0,10)}`;
            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body: text });
