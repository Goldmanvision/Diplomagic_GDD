name: Issue Labeler
on:
  issues:
    types: [opened, edited]
permissions:

  issues: write
  contents: read

jobs:
  triage:
    runs-on: ubuntu-latest
    steps:

      - uses: github/issue-labeler@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/issue_labeler.yml
          include-title: true
          include-body: true
          dry-run: false

      - name: Apply regex labels
        uses: actions/github-script@v7
        with:
          script: |

            const {owner, repo} = context.repo;
            const num = context.payload.issue.number;
            const title = context.payload.issue.title || "";
            const body  = context.payload.issue.body  || "";
            const txt = (title + "\n" + body).toLowerCase();
            core.info("Title: " + title);

            const rules = [
              {label: "Narrative", re: /\b(scene|dialog|story|narrative|script)\b/},
              {label: "QA & UX",   re: /\b(qa|regression|usability|ux|accessibility)\b/},
              {label: "A&R",       re: /\b(authenticity|citation|source|verify|research)\b/},
              {label: "Steam Ops", re: /\b(steam|depot|branch|app id|store page)\b/},
              {label: "Builds",    re: /\b(build|ci|unity|unreal|packaging|artifact)\b/},
              {label: "Mail",      re: /\b(stand-?by|handoff|postmaster|decision)\b/},
              {label: "Docs",      re: /\b(readme|docs?|documentation|mkdocs)\b/}
            ];

            const wanted = [...new Set(rules.filter(r => r.re.test(txt)).map(r => r.label))];
            core.info("Wanted: " + JSON.stringify(wanted));
            if (wanted.length) await github.rest.issues.addLabels({owner, repo, issue_number: num, labels: wanted});

